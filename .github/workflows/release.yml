name: Release

on:
  push:
    branches: [ "main" ]
    tags:
      - v*

env:
  REGISTRY_NAME: fonsecabarreto
  IMAGE_NAME: gpicm-nestjs-app

jobs:
  pushToDockerHub:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - run: docker build -f ./Dockerfile --target production --tag $REGISTRY_NAME/$IMAGE_NAME ./
    - run: echo "${{secrets.DOCKERHUB_PASSWORD}}" | docker login -u ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
    - run: docker push $REGISTRY_NAME/$IMAGE_NAME:latest

  deploy:
    needs: pushToDockerHub
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: kota65535/github-openvpn-connect-action@v2
        with:
          config_file: .github/workflows/client.ovpn
          username: ${{ secrets.OVPN_USERNAME }}
          password: ${{ secrets.OVPN_PASSWORD }}
          client_key: ${{ secrets.OVPN_CLIENT_KEY }}

      - name: Verify VPN Connection
        run: |
          sleep 5  # Aguarde um pouco para estabilizar a conexão
          if ! ip a | grep -q "tun"; then
            echo "VPN connection failed!"
            exit 1
          else
            echo "VPN connected successfully."
          fi

      - name: Execute remote commands via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: 22
          envs: WEB_IMAGE_NAME, IMAGE_NAME, REGISTRY_NAME, DOCKERHUB_PASSWORD, DOCKERHUB_USERNAME, APP_ENVS
          script: |
            # Criar .env a partir de variáveis secretas
            rm -f .env
            echo "${{ secrets.APP_ENVS }}" | base64 -d > .env

            # Login no Docker Hub
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin --quiet

            # Parar e atualizar containers
            docker compose -f /opt/app/docker-compose.prod.yml down
            docker image prune -f
            docker compose -f /opt/app/docker-compose.prod.yml pull
            docker compose --env-file ./.env -f /opt/app/docker-compose.prod.yml up --build -d

            echo "Deploy concluído com sucesso!"
