generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                   @id @default(autoincrement())
  publicId           String                @default(uuid()) @map("public_id")
  name               String?
  gender             String?               @map("gender")
  isVerified         Boolean?              @map("is_verified")
  birthDate          DateTime?             @map("birth_date")
  phoneNumber        String?               @map("phone_number")
  lastLoginAt        DateTime?             @map("last_login_at")
  bio                String?
  status             UserStatus            @default(ACTIVE)
  role               UserRoles             @default(GUEST)
  deviceKey          String                @unique @map("device_key")
  ipAddress          String?               @map("ip_address")
  deviceInfo         Json?                 @map("device_info")
  latitude           Float?
  longitude          Float?
  locationUpdatedAt  DateTime?             @map("location_updated_at")
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @updatedAt @map("updated_at")
  deletedAt          DateTime?             @map("deleted_at")
  avatarImageSources Json?                 @map("avatar_image_sources")
  avatarUrl          String?               @map("avatar_url")
  Credentials        UserCredential[]
  UserLogs           UserLog[]
  UserAgreements     UserPolicyAgreement[]
  Incidents          Incident[]
  Posts              Post[]
  PostVotes          PostVote[]
  Comments           PostComment[]
  Medias             Media[]

  @@unique([publicId])
  @@map("users")
}

model UserCredential {
  userId                     Int           @map("user_id")
  provider                   AuthProviders
  email                      String        @unique
  externalId                 String?       @map("external_id")
  passwordHash               String?       @map("password_hash")
  temporaryPasswordHash      String?       @map("temporary_password_hash")
  temporaryPasswordExpiresAt DateTime?     @map("temporary_password_expires_at")
  lastPasswordChangeAt       DateTime?     @map("last_password_change_At")
  isPrimary                  Boolean       @default(false) @map("is_primary")
  createdAt                  DateTime      @default(now()) @map("created_at")
  updatedAt                  DateTime      @updatedAt @map("updated_at")
  deletedAt                  DateTime?     @map("deleted_at")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, provider])
  @@unique([userId, isPrimary], name: "unique_primary_email_per_user")
  @@map("user_credentials")
}

model UserPolicyAgreement {
  userId            Int       @map("user_id")
  policyId          String    @map("policy_id")
  policyContentHash String    @map("policy_content_hash")
  ipAddress         String    @map("ip_address")
  userAgent         String    @map("user_agent")
  deletedAt         DateTime? @map("deleted_at")
  consentedAt       DateTime  @default(now()) @map("consented_at")

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@id([userId, policyId])
  @@map("user_policy_agreements")
}

model Policy {
  id                  String                @id @default(uuid()) @map("id")
  version             String
  type                PolicyType
  content             String                @db.LongText
  htmlContent         String                @db.LongText
  createdAt           DateTime              @default(now())
  deletedAt           DateTime?
  UserPolicyAgreement UserPolicyAgreement[]

  @@unique([version, type])
  @@map("policies")
}

model UserLog {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  action    String    @map("action")
  message   String    @map("message")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_logs")
}

model Incident {
  id String @id()

  title String @db.LongText

  description String @db.LongText

  status Int

  address String

  latitude Float?

  longitude Float?

  authorId Int @map("author_id")

  incidentTypeId Int @map("incident_type_id")

  incidentDate DateTime @map("incident_date")

  reporterName String? @map("reporter_name")

  observation String?

  // Relations
  IncidentType IncidentType @relation(fields: [incidentTypeId], references: [id])
  Author       User         @relation(fields: [authorId], references: [id])
  Posts        Post[]

  @@map("incidents")
}

model IncidentType {
  id Int @id @default(autoincrement())

  name String

  slug String @unique

  imageUrl String? @map("image_url")

  description String @db.LongText

  internalId Int @unique @map("internal_id")

  // Relations
  Incidents Incident[]

  @@map("incident_types")
}

model Post {
  id                Int                   @id @default(autoincrement())
  uuid              String                @unique @default(uuid())
  slug              String                @unique
  title             String                @db.LongText
  content           String                @db.LongText
  isPinned          Boolean               @default(false) @map("is_pinned")
  isVerified        Boolean               @default(false) @map("is_verified")
  status            PostStatus            @default(DRAFT)
  type              PostType              @default(INCIDENT)
  publishedAt       DateTime?             @map("published_at")
  authorId          Int                   @map("author_id")
  incidentId        String?               @map("incident_id")
  upVotes           Int                   @default(0) @map("up_votes")
  downVotes         Int                   @default(0) @map("down_votes")
  commentsCount     Int                   @default(0) @map("comments_count")
  score             Int                   @default(0) @map("score")
  location          Unsupported("POINT")?
  locationAddress   String?               @map("location_address")
  views             Int                   @default(0)
  keywords          String?
  coverImageSources Json?                 @map("cover_image_sources")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")

  Author    User          @relation(fields: [authorId], references: [id])
  Incident  Incident?     @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  Votes     PostVote[]
  Comments  PostComment[]
  PostMedia PostMedia[]

  @@map("posts")
}

/**
 * Integrations
 */
model Partner {
  id        Int             @id @default(autoincrement()) @map("id")
  name      String          @map("name")
  email     String          @unique @map("email")
  apiKeys   PartnerApiKey[] @relation("PartnerApiKeys")
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  @@map("partners")
}

model CivilDefenseAlert {
  id          Int      @id @default(autoincrement())
  title       String   @db.LongText
  description String   @db.LongText
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  gravityLevel GravityLevel @map("gravity_level")
  status       AlertStatus

  @@map("civil_defense_alerts")
}

model PartnerApiKey {
  id        Int      @id @default(autoincrement()) @map("id")
  key       String   @unique @map("key")
  partnerId Int      @map("partner_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Partner Partner @relation("PartnerApiKeys", fields: [partnerId], references: [id])

  @@map("partner_api_keys")
}

model PostVote {
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  value     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Post Post @relation(fields: [postId], references: [id])
  User User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("post_votes")
}

// Media

model PostMedia {
  postId       Int      @map("post_id")
  mediaId      String   @map("media_id")
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  Post  Post  @relation(fields: [postId], references: [id])
  Media Media @relation(fields: [mediaId], references: [id])

  @@id([postId, mediaId])
  @@map("post_medias")
}

model Media {
  id              String                @id
  filename        String
  storageProvider MediaStorageProvider? @map("storage_provider")
  sources         Json?
  altText         String?
  caption         String?
  contentType     String                @map("content_type")
  status          MediaStatus           @default(CREATED)
  type            MediaType             @default(OTHER)
  ownerId         Int                   @map("owner_id")
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")
  deletedAt       DateTime?             @map("deleted_at")
  Owner           User                  @relation(fields: [ownerId], references: [id])
  PostMedia       PostMedia[]

  @@index([ownerId])
  @@map("medias")
}

model PostComment {
  id        Int       @id @default(autoincrement())
  postId    Int       @map("post_id")
  userId    Int       @map("user_id")
  content   String    @db.LongText
  parentId  Int?      @map("parent_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Post      Post      @relation(fields: [postId], references: [id])
  User      User      @relation(fields: [userId], references: [id])

  @@map("post_comments")
}

enum MediaStatus {
  CREATED
  UPLOADING
  ACTIVE
  FAILED
  DELETED
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  OTHER
}

enum MediaStorageProvider {
  S3
  LOCAL
}

// Enums

enum PostType {
  INCIDENT
}

enum PostStatus {
  DRAFT
  PUBLISHING
  PUBLISHED
  UNLISTED
  ARCHIVED
}

enum UserStatus {
  ACTIVE
  BANNED
  SUSPENDED
}

enum PolicyType {
  TERMS_OF_SERVICE
  PRIVACY_POLICY
  DATA_USAGE_POLICY
}

enum AuthProviders {
  EMAIL_PASSWORD
  GOOGLE
}

enum UserRoles {
  USER
  GUEST
  ADMIN
}

enum AlertStatus {
  ACTIVE
  INACTIVE
}

enum GravityLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
  EXTREME
}
